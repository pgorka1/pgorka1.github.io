{"version":3,"sources":["../node_modules/peerjs/dist sync","peer.js","serviceWorker.js","index.js","App.js"],"names":["webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id","peerIdSubscriber","connectionInSubscriber","peer","Peer","connectToPeer","connect","on","conn","data","console","log","Boolean","window","location","hostname","match","ReactDOM","render","useState","peerId","setPeerId","connectionOut","setConnectionOut","connectionIn","setConnectionIn","peerIdInputValue","setPeerIdInputValue","messageInputValue","setMessageInputValue","useEffect","subscribeToOpenCb","subscriber","subscribeToConnectionIn","subscribeToConnectionInCb","connection","createConnectionOut","connectionInPassed","className","value","onChange","event","target","type","onClick","trim","send","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yJAAA,SAASA,EAAoBC,GAC5B,IAAIC,EAAI,IAAIC,MAAM,uBAAyBF,EAAM,KAEjD,MADAC,EAAEE,KAAO,mBACHF,EAEPF,EAAoBK,KAAO,WAAa,MAAO,IAC/CL,EAAoBM,QAAUN,EAC9BO,EAAOC,QAAUR,EACjBA,EAAoBS,GAAK,I,wCCNrBC,EACAC,E,8DAGEC,EAAO,I,OAAIC,GAUXC,EAAgB,SAACL,GAEnB,OADaG,EAAKG,QAAQN,IAI9BG,EAAKI,GAAG,cAAc,SAAUC,GAC5BN,EAAuBM,GACvBA,EAAKD,GAAG,QAAQ,SAAUE,GACtBC,QAAQC,IAAIF,SAIpBN,EAAKI,GAAG,QAAQ,SAAUP,GACtBC,EAAiBD,MCjBDY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,mBCFD,WAAO,IAAD,EACWC,mBAAS,MADpB,mBACVC,EADU,KACFC,EADE,OAIyBF,mBAAS,MAJlC,mBAIVG,EAJU,KAIKC,EAJL,OAKuBJ,mBAAS,MALhC,mBAKVK,EALU,KAKIC,EALJ,OAQ+BN,mBAAS,IARxC,mBAQVO,EARU,KAQQC,EARR,OASiCR,mBAAS,IAT1C,mBASVS,EATU,KASSC,EATT,KAWjBC,qBAAU,WACDV,IHPTnB,EGOmC8B,GAC1BP,GHLmB,SAACQ,GAC7B9B,EAAyB8B,EGIFC,CAAwBC,MAG/C,IAAMH,EAAoB,SAAC/B,GACvBqB,EAAUrB,IAGRkC,EAA4B,SAACC,GAC/BV,EAAgBU,GAChBzB,QAAQC,IAAIwB,GACPb,GAAec,EAAoBD,IAGtCC,EAAsB,SAACC,GACzB,IAAIf,EAAgB,KAOpB,OANIe,IACAf,EAAgBjB,EAAcgC,EAAmBlC,QAE7CoB,EAAiBD,GAGlBA,GAsBX,OACI,yBAAKgB,UAAU,OACX,sDADJ,gBAEkBlB,EACd,6BAHJ,kBAIoBE,EAAgBA,EAAcnB,KAAO,gBACrD,6BALJ,oBAMsBqB,EAAeA,EAAarB,KAAO,gBACrD,6BACA,6BACA,6BACA,2BAAOoC,MAAOb,EAAkBc,SA9BZ,SAACC,GACzBd,EAAoBc,EAAMC,OAAOH,QA6BkCI,KAAK,SACpE,4BAAQC,QAvBO,WACdlB,EAAiBmB,QACtBtB,EAAiBlB,EAAcqB,MAqB3B,WACA,6BACA,2BAAOa,MAAOX,EAAmBY,SA7BZ,SAACC,GAC1BZ,EAAqBY,EAAMC,OAAOH,QA4BmCI,KAAK,SACtE,4BAAQC,QAAS,WApBhBhB,EAAkBiB,QACvBvB,EAAcwB,KAAKlB,KAmBf,mBDrEI,MAASmB,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.a3a0a0fb.chunk.js","sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 12;","import Peer from \"peerjs\";\n\nlet peerIdSubscriber;\nlet connectionInSubscriber;\n\nlet connection = null;\nconst peer = new Peer();\n\nconst subscribeToPeerId = (subscriber) => {\n    peerIdSubscriber = subscriber;\n};\n\nconst subscribeToConnectionIn = (subscriber) => {\n    connectionInSubscriber = subscriber;\n};\n\nconst connectToPeer = (id) => {\n    connection = peer.connect(id);\n    return connection;\n};\n\npeer.on('connection', function (conn) {\n    connectionInSubscriber(conn);\n    conn.on('data', function (data) {\n        console.log(data);\n    });\n});\n\npeer.on('open', function (id) {\n    peerIdSubscriber(id);\n});\n\nexport {peer, subscribeToPeerId, connectToPeer, subscribeToConnectionIn}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n","import React, {useEffect, useState} from 'react';\nimport './App.css';\nimport {subscribeToPeerId, connectToPeer, subscribeToConnectionIn} from \"./peer\";\n\nexport default () => {\n    const [peerId, setPeerId] = useState(null);\n\n    // connections\n    const [connectionOut, setConnectionOut] = useState(null); // connecting to client\n    const [connectionIn, setConnectionIn] = useState(null); // connection from another client\n\n    // inputs\n    const [peerIdInputValue, setPeerIdInputValue] = useState('');\n    const [messageInputValue, setMessageInputValue] = useState('');\n\n    useEffect(() => {\n        if (!peerId) subscribeToPeerId(subscribeToOpenCb);\n        if (!connectionIn) subscribeToConnectionIn(subscribeToConnectionInCb);\n    });\n\n    const subscribeToOpenCb = (id) => {\n        setPeerId(id);\n    };\n\n    const subscribeToConnectionInCb = (connection) => {\n        setConnectionIn(connection);\n        console.log(connection);\n        if (!connectionOut) createConnectionOut(connection)\n    };\n\n    const createConnectionOut = (connectionInPassed) => {\n        let connectionOut = null;\n        if (connectionInPassed) { // using id of client that is connected to this peer\n            connectionOut = connectToPeer(connectionInPassed.peer);\n            if (connectionOut) {\n                setConnectionOut(connectionOut);\n            }\n        }\n        return connectionOut;\n    };\n\n    const onChangePeerIdInput = (event) => {\n        setPeerIdInputValue(event.target.value);\n    };\n\n    const onChangeMessageInput = (event) => {\n        setMessageInputValue(event.target.value);\n    };\n\n    const onClickConnect = () => {\n        if (!peerIdInputValue.trim()) return;\n        setConnectionOut(connectToPeer(peerIdInputValue))\n    };\n\n    const sendMessage = () => {\n        if (!messageInputValue.trim()) return;\n        connectionOut.send(messageInputValue);\n    };\n\n\n    return (\n        <div className=\"App\">\n            <h4>Peerjs demo with react</h4>\n            User peerId: {peerId}\n            <br />\n            connection to: {connectionOut ? connectionOut.peer : 'No Connection'}\n            <br />\n            connection from: {connectionIn ? connectionIn.peer : 'No Connection'}\n            <br />\n            <br />\n            <br />\n            <input value={peerIdInputValue} onChange={onChangePeerIdInput} type=\"text\" />\n            <button onClick={onClickConnect}>connect</button>\n            <br />\n            <input value={messageInputValue} onChange={onChangeMessageInput} type=\"text\" />\n            <button onClick={() => sendMessage()}>Send Message</button>\n        </div>\n    );\n}\n"],"sourceRoot":""}